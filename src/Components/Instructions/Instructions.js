import React, { useState } from "react";
import "./Instructions.css"; // Import the CSS file

const InstructionsModal = ({ id }) => {
  const [isVisible, setIsVisible] = useState(true);
  const [currentIndex, setCurrentIndex] = useState(0);

  // Different instruction sets based on the id
  const instructionsList = {
    1: [
      {step: "Step 1", explanation: "In this activity, we will practice operations in Python. \nThere are four functions here: add, subtract, multiply, and divide."},
      {
        step: "Step 2",
        explanation: `Each function must have a return statement, like the following example for addition:
        
# This function adds two numbers
def add(x, y):
    return x + y

Simply, the return statement here is "return x + y" to calculate the sum of x and y.`
      },
      {step: "Step 3", explanation: "You can run your code if you have added the correct return statement for each function.\nFeel free to add some lines to test if each function is working appropriately."},
      {step: "Step 4", explanation: "Finally, you can run the test cases."},
      {step: "Step 5", explanation: "Upon passing all test cases, the calculator will be enabled and available for use.\nIf not, you can try again."},
      {step: "Step 6", explanation: "Now you can move to the next activity."}
    ],
    2: [
      { step: "Step 1", explanation: "You will practice handling lists in this activity.\nThe goal is to write code to identify the 'stranger' element from the list.\nThe provided program is responsible for generating the list, while you have to write the logic to detect the odd one out." },
      { step: "Step 2", explanation: "This function generates a random list containing one 'stranger' element based on three possible rules:\n 1.Same Type: Most elements share the same type (e.g., integers), while the stranger has a different type (e.g., string).\n 2.Same Value: Most elements have the same value, while the stranger has a different value.\n 3.Same Length: Most elements are lists of the same length, while the stranger is a shorter list." },
      { step: "Step 3", 
        explanation: `To find the stranger easily you need to understand the different lists generated by the program and how to process them.\nFor example if the list elements are integers except one string (or vice versa) the difference in here is the type:
        
# Here is the list:
[42, 42, 42, 'banana', 42]

for item in generated_list:
    if not isinstance(item, int):
        print(item)  # Output: 'banana'
`
      },
      { step: "Step 4", explanation: "But first we need to recognise the type of the generated list and as we have just three different types and this is the only one that has strings we need to add another line of code to check if a string is in the list." },
      { step: "Step 5", explanation: "You can run the program after adding the code to find the stranger for all the types of lists.\nFeel free to add some lines to test and display to see if you code is working appropriately."},
      { step: "Step 6", explanation: "Finally, you can run the test cases."},
      { step: "Step 7", explanation: "Now you can move to the next activity."}
    ],
    3: [
      { step: "Step 1", explanation: "In this activity, you will practice the different Python operations you can apply to strings.\nThis will be done through playing a game: 'password generator'.\nTo generate powerful code, you will simply handle a group of words that are normally chosen by the user.\nFinally, you will challenge the computer, and the objective is to maximize its time to reveal the code." },
      { step: "Step 2", explanation: `This function asks the user to enter a specific input:
    - First word: 2 uppercase letters
    - Second word: 2 lowercase letters
    - Third word: 2 numbers
    - Fourth word: 2 special characters
    It then generates a secret code by slicing, repeating, and concatenating parts of the input.`},
      { step: "Step 3", explanation: "It is your responsibility to add the lines of code that do the slicing, repetition, and concatenation.\nYou can change the code and add more operations as you wish, but just remember the goal is to create a powerful code." },
      { step: "Step 4", explanation: "Test your program and display the code to see if everythin is working as wanted" }
    ]
  };

  // Default to instructions for id 1 if no valid id is passed
  const instructions = instructionsList[id] || instructionsList[1];

  const handleNext = () => {
    if (currentIndex < instructions.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };
  const handlePreviouse = () => {
    if (currentIndex < instructions.length - 1) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  const handleClose = () => {
    setIsVisible(false);
    setCurrentIndex(0); // Reset to the first step
  };

  return (
    <div>
      {isVisible && (
        <div className="modal-overlay">
          <div className="modal-content">
             {/* Close Button in the top-right corner */}
             <button className="close-button" onClick={handleClose}>
              &times;
            </button>
            {/* Display step title */}
            <h2 className="step-title">{instructions[currentIndex].step}</h2>
            {/* Display explanation with code highlighting if applicable */}
            {(instructions[currentIndex].explanation.includes("isinstance") || instructions[currentIndex].explanation.includes("def "))? (
              <pre className="code-block">
                <code>{instructions[currentIndex].explanation}</code>
              </pre>
            ) : (
              <p className="step-explanation">{instructions[currentIndex].explanation.split("\n").map((line, index) => (
                <span key={index}>
                  {line}
                  <br />
                </span>
              ))}</p>
            )}
            
            <div>
              {currentIndex < instructions.length - 1 ? (
                <>
                <button className="inst-btn" onClick={handlePreviouse}>Previous</button>
                <button className="inst-btn" onClick={handleNext}>Next</button>
                </>
              ) : (
                <button className="inst-btn" onClick={handleClose}>Close</button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InstructionsModal;
